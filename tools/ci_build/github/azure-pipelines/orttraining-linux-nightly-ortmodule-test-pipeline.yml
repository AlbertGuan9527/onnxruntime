trigger: none

jobs:
- job: Onnxruntime_Linux_Nightly_ORTModule_tests

  timeoutInMinutes: 120
  pool: 'Onnxruntime-Linux-GPU-NC6sv3'

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  # Entry point for all ortmodule training tests
  - script: |
      cd $(Build.SourcesDirectory)
      docker run \
        --gpus all \
        --rm \
        --volume $(Build.SourcesDirectory)/orttraining/orttraining/test/python:/onnxruntime_src \
        --volume $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/training/ortmodule/stage1/requirements_torch_nightly:/requirements_torch_nightly \
        ptebic.azurecr.io/internal/aifx/acpt/nightly-ubuntu-cuda-torch-dev \
        bash -c "\
        python3 -m pip install -r /requirements_torch_nightly/requirements.txt && \
        python3 -m pip install cerberus flatbuffers h5py 'numpy>=1.16.6' onnx packaging protobuf sympy 'setuptools>=41.4.0' && \
        pip install --pre -i https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/pypi/simple/ onnxruntime-training && \
        pip install torch-ort && \
        python -m torch_ort.configure && \
        ORTMODULE_ENABLE_MEM_EFFICIENT_GRAD_MGMT=0 python3 -m pytest -sv /onnxruntime_src/orttraining_test_ortmodule_api.py && \
        ORTMODULE_ENABLE_MEM_EFFICIENT_GRAD_MGMT=1 python3 -m pytest -sv /onnxruntime_src/orttraining_test_ortmodule_api.py"
    displayName: 'Run ORTModule Tests'
    condition: succeededOrFailed()
    timeoutInMinutes: 120
  - template: templates/component-governance-component-detection-steps.yml
    parameters:
      condition: 'succeeded'
