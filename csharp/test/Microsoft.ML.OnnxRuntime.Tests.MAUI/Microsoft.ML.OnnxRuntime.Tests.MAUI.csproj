<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<IsWindowsBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">true</IsWindowsBuild>
		<IsAndroidBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">true</IsAndroidBuild>
		<IsIOSBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">true</IsIOSBuild>
		<IsMacCatalystBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">true</IsMacCatalystBuild>
		<OnnxRuntimeRoot>$(ProjectDir)..\..\..</OnnxRuntimeRoot>
		<PrebuiltRuntimesDir>$(OnnxRuntimeRoot)\build\microsoft.ml.onnxruntime.1.18.1\runtimes</PrebuiltRuntimesDir>
	</PropertyGroup>

	<PropertyGroup>
		<TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>Microsoft.ML.OnnxRuntime.Tests.MAUI</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>

		<!-- TODO: Do we need to set the CI property in the CI yaml or is it automatic? -->
		<DefineConstants Condition="'$(CI)' != 'true'">$(DefineConstants);INCLUDE_FAILING_TESTS</DefineConstants>
		<DefineConstants Condition="'$(TestingMode)' == 'NonInteractiveVisual'">$(DefineConstants);MODE_NON_INTERACTIVE_VISUAL</DefineConstants>
		<DefineConstants Condition="'$(TestingMode)' == 'XHarness'">$(DefineConstants);MODE_XHARNESS</DefineConstants>

		<!-- Display name -->
		<ApplicationTitle>Microsoft.ML.OnnxRuntime.Tests.MAUI</ApplicationTitle>

		<!-- App Identifier. MUST be short or you get a misleading error about not being able to deploy the app -->
		<ApplicationId>ORT.CSharp.Tests.MAUI</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="'$(IsIOSBuild)' == 'true'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="'$(IsMacCatalystBuild)' == 'true'">13.1</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="'$(IsAndroidBuild)' == 'true'">30.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="'$(IsWindowsBuild)' == 'true'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="'$(IsWindowsBuild)' == 'true'">10.0.17763.0</TargetPlatformMinVersion>

		<SignAssembly>true</SignAssembly>
		<AssemblyOriginatorKeyFile>..\..\OnnxRuntime.snk</AssemblyOriginatorKeyFile>
		<!-- <DefaultLanguage>en-us</DefaultLanguage> -->

		<!-- Multiple csproj files copy the ORT dll and pdb files. -->
		<ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
	</PropertyGroup>

	<!-- set to the default directories that a build would create. adjust for local testing as needed. -->
	<PropertyGroup Condition="'$(IsWindowsBuild)' == 'true'">
		<NativeBuildOutputDir>$(OnnxRuntimeRoot)\build\Windows\$(Configuration)\$(Configuration)</NativeBuildOutputDir>
		<!-- TODO: support other architectures if needed. -->
		<PrebuiltDir>$(PrebuiltRuntimesDir)\win-x64\native</PrebuiltDir>
	</PropertyGroup>
	<PropertyGroup Condition="'$(IsAndroidBuild)' == 'true'">
		<NativeBuildOutputDir>$(OnnxRuntimeRoot)\build\Android\$(Configuration)</NativeBuildOutputDir>
		<PrebuiltAAR>$(PrebuiltRuntimesDir)\android\native\onnxruntime.aar</PrebuiltAAR>
	</PropertyGroup>
	<PropertyGroup Condition="'$(IsIOSBuild)' == 'true'">
		<!-- TODO: should be able to detect whether it's a simulator build or not automatically? -->
		<Platform Condition=" '$(Platform)' == '' ">iPhoneSimulator</Platform>
		<NativeBuildOutputDir>$(OnnxRuntimeRoot)\build\iOS\$(Configuration)\$(Configuration)-$(Platform)</NativeBuildOutputDir>
		<PrebuiltFramework>$(PrebuiltRuntimesDir)\ios\native\onnxruntime.xcframework</PrebuiltFramework>
	</PropertyGroup>
	<PropertyGroup Condition="'$(IsMacCatalystBuild)' == 'true'">
		<NativeBuildOutputDir>$(OnnxRuntimeRoot)\build\MacOS\$(Configuration)</NativeBuildOutputDir>
		<PrebuiltFramework>$(PrebuiltRuntimesDir)\ios\native\onnxruntime.xcframework</PrebuiltFramework>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<Compile Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\InferenceTest.cs">
			<Link>InferenceTest.cs</Link>
		</Compile>
		<Compile Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\OrtIoBindingAllocationTest.cs">
			<Link>OrtIoBindingAllocationTest.cs</Link>
		</Compile>
		<Compile Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\Tensors\TensorTests.cs">
			<Link>TensorTests.cs</Link>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\..\src\Microsoft.ML.OnnxRuntime\Microsoft.ML.OnnxRuntime.csproj"
						  name="Microsoft.ML.OnnxRuntime" />
		<ProjectReference Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\Microsoft.ML.OnnxRuntime.Tests.Common.csproj"
						  name="Microsoft.ML.OnnxRuntime.Tests.Common" />
		<ProjectReference Include="..\Microsoft.ML.OnnxRuntime.Tests.Devices\Microsoft.ML.OnnxRuntime.Tests.Devices.csproj"
						  name="Microsoft.ML.OnnxRuntime.Tests.Devices" />
	</ItemGroup>

	<!--
	Use a released Microsoft.ML.OnnxRuntime nuget package or a recent build from
	https://aiinfra.visualstudio.com/PublicPackages/_artifacts/feed/ORT-Nightly if testing C# changes.
	These contain the Windows, Android and iOS native binaries.

	Unzip the nupkg file in the /build directory to create /build/microsoft.ml.onnxruntime.1.18.1 directory.
	Adjust the version number in PrebuiltRuntimesDir as needed.

	If testing changes to the native library, build locally and adjust the build path if needed.
	Build paths assume no manual override of the default build output directory.
	-->
	<ItemGroup Condition="'$(IsWindowsBuild)'=='true'">
		<!-- local build -->
		<None Include="$(NativeBuildOutputDir)\onnxruntime.dll;
				$(NativeBuildOutputDir)\onnxruntime.pdb;
				$(NativeBuildOutputDir)\onnxruntime_providers_*.dll;
				$(NativeBuildOutputDir)\onnxruntime_providers_*.pdb;
				$(NativeBuildOutputDir)\custom_op_library*.dll">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>true</Visible>
		</None>

		<!-- prebuilt -->
		<None Condition="!Exists('$(NativeBuildOutputDir)\onnxruntime.dll')"
			  Include="$(PrebuiltDir)\*.*">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>true</Visible>
		</None>

		<!-- test data -->
		<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\*">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
			</None>
			<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\overridable_initializer.onnx">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</None>
		<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\capi_symbolic_dims.onnx">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</None>
		<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\custom_op_library\custom_op_test.onnx">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</None>
	</ItemGroup>

	<ItemGroup Condition="'$(IsAndroidBuild)' == 'true'">
		<!-- local build -->
		<AndroidNativeLibrary Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')"
							  Include="$(NativeBuildOutputDir)\libonnxruntime.so">
			<Link>libs\libonnxruntime.so</Link>
		</AndroidNativeLibrary>

		<!-- build from package -->
		<AndroidLibrary
			Bind="false"
			Condition="Exists('$(PrebuiltAAR)') AND !Exists('$(NativeBuildOutputDir)\libonnxruntime.so')"
			Include="$(PrebuiltAAR)"/>
	</ItemGroup>

	<ItemGroup Condition="'$(IsIOSBuild)' == 'true'">
		<!-- local build of shared lib -->
		<NativeReference
			Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
			Include="$(NativeBuildOutputDir)\libonnxruntime.dylib">
			<Link>libs\libonnxruntime.dylib</Link>
			<Kind>Dynamic</Kind>
			<ForceLoad>True</ForceLoad>
			<IsCxx>True</IsCxx>
		</NativeReference>

		<!-- build from package -->
		<NativeReference
			Condition="Exists('$(PrebuiltFramework)') AND !Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
			Include="$(PrebuiltFramework)">
			<Kind>Framework</Kind>
			<ForceLoad>True</ForceLoad>
			<IsCxx>True</IsCxx>
		</NativeReference>
	</ItemGroup>

	<ItemGroup Condition="'$(IsMacCatalystBuild)' == 'true'">
		<!-- local build -->
		<NativeReference Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
						 Include="$(NativeBuildOutputDir)\libonnxruntime.dylib">
			<Link>libs\libonnxruntime.dylib</Link>
			<Kind>Dynamic</Kind>
			<ForceLoad>True</ForceLoad>
			<IsCxx>True</IsCxx>
		</NativeReference>

		<!-- build from package -->
		<NativeReference
			Condition="Exists('$(PrebuiltFramework)') AND !Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')"
			Include="$(PrebuiltFramework)">
			<Kind>Framework</Kind>
			<ForceLoad>True</ForceLoad>
			<IsCxx>True</IsCxx>
		</NativeReference>
	</ItemGroup>

	<!--
	Property debug output - makes finding/fixing any issues with the the conditions easy.
	Current checks are for local builds
	-->
	<PropertyGroup>
		<!-- local builds-->
		<HaveOrtDll>false</HaveOrtDll>
		<HaveOrtDll Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.dll')">true</HaveOrtDll>
		<HaveOrtSo>false</HaveOrtSo>
		<HaveOrtSo Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')">true</HaveOrtSo>
		<HaveOrtDylib>false</HaveOrtDylib>
		<HaveOrtDylib Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.dylib')">true</HaveOrtDylib>
		<!-- prebuilt -->
		<HavePrebuilt>false</HavePrebuilt>
		<HavePrebuilt Condition="Exists('$(PrebuiltDir)')">true</HavePrebuilt>
		<HaveAAR>false</HaveAAR>
		<HaveAAR Condition="Exists('$(PrebuiltAAR)')">true</HaveAAR>
		<HaveFramework>false</HaveFramework>
		<HaveFramework Condition="Exists('$(PrebuiltFramework)')">true</HaveFramework>
	</PropertyGroup>

	<Target Name="DumpValues" BeforeTargets="PreBuildEvent">
		<Message Text="IsWindowsBuild='$(IsWindowsBuild)'" />
		<Message Text="IsAndroidBuild='$(IsAndroidBuild)'" />
		<Message Text="IsIOSBuild='$(IsIOSBuild)'" />
		<Message Text="IsMacCatalystBuild='$(IsMacCatalystBuild)'" />
		<Message Text="OnnxRuntimeRoot=$(OnnxRuntimeRoot)" />
		<Message Text="NativeBuildOutputDir=$(NativeBuildOutputDir)" />
		<Message Text="onnxruntime.dll from local build=$(HaveOrtDll)" />
		<Message Text="libonnxruntime.so from local build=$(HaveOrtSo)" />
		<Message Text="libonnxruntime.dylib from local build=$(HaveOrtDylib)" />
		<Message Text="Prebuilt runtime=$(HavePrebuilt)" />
		<Message Text="Prebuilt AAR=$(HaveAAR)" />
		<Message Text="Prebuilt xcframework=$(HaveFramework)" />
	</Target>

	<ItemGroup>
		<PackageReference Include="DeviceRunners.VisualRunners.Maui" Version="0.1.0-preview.2" />
		<PackageReference Include="DeviceRunners.VisualRunners.Xunit" Version="0.1.0-preview.2" />
		<PackageReference Include="DeviceRunners.XHarness.Maui" Version="0.1.0-preview.2" />
		<PackageReference Include="DeviceRunners.XHarness.Xunit" Version="0.1.0-preview.2" />
		<PackageReference Include="Microsoft.DotNet.XHarness.TestRunners.Xunit" Version="9.0.0-prerelease.24374.1" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="8.0.70" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="8.0.70" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.0" />
		<PackageReference Include="xunit" Version="2.9.0" />
		<PackageReference Include="xunit.runner.utility" Version="2.9.0" />
		<PackageReference Include="xunit.runner.visualstudio" Version="2.8.2">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<Target Name="RemoveVisualStudioTestRunner" BeforeTargets="_ComputeAppxPackagePayload">
		<ItemGroup>
			<_VisualStudioTestRunnerFiles Include="@(PackagingOutputs)" Condition="$([System.String]::Copy('%(PackagingOutputs.FullPath)').Contains('xunit.runner.visualstudio'))" />
			<PackagingOutputs Remove="@(_VisualStudioTestRunnerFiles)" />
		</ItemGroup>
	</Target>
</Project>
