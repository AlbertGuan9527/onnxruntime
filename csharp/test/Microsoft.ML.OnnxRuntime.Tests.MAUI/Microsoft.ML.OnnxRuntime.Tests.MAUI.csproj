<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<IsWindowsBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">true</IsWindowsBuild>
		<IsAndroidBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">true</IsAndroidBuild>
		<IsIOSBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">true</IsIOSBuild>
		<IsMacCatalystBuild Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">true</IsMacCatalystBuild>
		<OnnxRuntimeRoot>$(ProjectDir)..\..\..</OnnxRuntimeRoot>
	</PropertyGroup>

	<PropertyGroup>
		<TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>Microsoft.ML.OnnxRuntime.Tests.MAUI</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>

		<!-- TODO: Do we need to set the CI property in the CI yaml or is it automatic? -->
		<DefineConstants Condition="'$(CI)' != 'true'">$(DefineConstants);INCLUDE_FAILING_TESTS</DefineConstants>
		<DefineConstants Condition="'$(TestingMode)' == 'NonInteractiveVisual'">$(DefineConstants);MODE_NON_INTERACTIVE_VISUAL</DefineConstants>
		<DefineConstants Condition="'$(TestingMode)' == 'XHarness'">$(DefineConstants);MODE_XHARNESS</DefineConstants>

		<!-- Display name -->
		<ApplicationTitle>Microsoft.ML.OnnxRuntime.Tests.MAUI</ApplicationTitle>

		<!-- App Identifier. MUST be short or you get a misleading error about not being able to deploy the app -->
		<ApplicationId>ORT.CSharp.Tests.MAUI</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="'$(IsIOSBuild)' == 'true'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="'$(IsMacCatalystBuild)' == 'true'">13.1</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="'$(IsAndroidBuild)' == 'true'">30.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="'$(IsWindowsBuild)' == 'true'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="'$(IsWindowsBuild)' == 'true'">10.0.17763.0</TargetPlatformMinVersion>

		<SignAssembly>true</SignAssembly>
		<AssemblyOriginatorKeyFile>..\..\OnnxRuntime.snk</AssemblyOriginatorKeyFile>
		<!-- <DefaultLanguage>en-us</DefaultLanguage> -->

		<!-- Multiple csproj files copy the ORT dll and pdb files. -->
		<ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
	</PropertyGroup>

	<!-- set to the default directories that a build would create. adjust for local testing as needed. -->
	<PropertyGroup Condition="'$(IsWindowsBuild)' == 'true'">
		<NativeBuildOutputDir>$(OnnxRuntimeRoot)\build\Windows\$(Configuration)\$(Configuration)</NativeBuildOutputDir>
	</PropertyGroup>
	<PropertyGroup Condition="'$(IsAndroidBuild)' == 'true'">
		<NativeBuildOutputDir>$(OnnxRuntimeRoot)\build\Android\$(Configuration)</NativeBuildOutputDir>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<!-- TBD if this is required. Seems to break Package.appxmanifest processing though
	<ItemGroup>
		<None Include="Platforms\**" />
		<Compile Remove="Platforms\**" />
		<Compile Include="Platforms\Android\**" Condition="'$(IsAndroidBuild)' == 'true'" />
		<Compile Include="Platforms\iOS\**" Condition="'$(IsIOSBuild)' == 'true'" />
		<Compile Include="Platforms\MacCatalyst\**" Condition="'$(IsMacCatalystBuild)' == 'true'" />
		<Compile Include="Platforms\Windows\**" Condition="'$(IsWindowsBuild)' == 'true'" />
	</ItemGroup>
	-->
	<ItemGroup>
		<Compile Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\InferenceTest.cs">
			<Link>InferenceTest.cs</Link>
		</Compile>
		<Compile Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\OrtIoBindingAllocationTest.cs">
			<Link>OrtIoBindingAllocationTest.cs</Link>
		</Compile>
		<Compile Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\Tensors\TensorTests.cs">
			<Link>TensorTests.cs</Link>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\..\src\Microsoft.ML.OnnxRuntime\Microsoft.ML.OnnxRuntime.csproj"
						  name="Microsoft.ML.OnnxRuntime" />
		<ProjectReference Include="..\Microsoft.ML.OnnxRuntime.Tests.Common\Microsoft.ML.OnnxRuntime.Tests.Common.csproj"
						  name="Microsoft.ML.OnnxRuntime.Tests.Common" />
		<ProjectReference Include="..\Microsoft.ML.OnnxRuntime.Tests.Devices\Microsoft.ML.OnnxRuntime.Tests.Devices.csproj"
						  name="Microsoft.ML.OnnxRuntime.Tests.Devices" />
	</ItemGroup>

	<ItemGroup Condition="'$(IsAndroidBuild)' == 'true'">
		<!-- Setup EITHER a local build or put and AAR in the AndroidAAR directory and update the filename below. -->

		<!-- local build -->
		<AndroidNativeLibrary Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')"
							  Include="$(NativeBuildOutputDir)\libonnxruntime.so">
			<Link>libs\libonnxruntime.so</Link>
		</AndroidNativeLibrary>

		<!--
		Use a released AAR from https://mvnrepository.com/artifact/com.microsoft.onnxruntime/onnxruntime-android
		unless testing changes that require the latest ORT code.
		If the changes are checked in you can get the AAR from the Microsoft.ML.OnnxRuntime Nuget package on
		https://aiinfra.visualstudio.com/PublicPackages/_artifacts/feed/ORT-Nightly

		If you're testing changes on a branch an AAR can be created using \tools\ci_build\github\android\build_aar_package.py
		or by running just the Android_Java_API_AAR_Packaging_Full stage of the Zip-Nuget-Java-Nodejs Packaging Pipeline CI
		using the branch and downloading the artifact it publishes.
		-->
		<AndroidLibrary
			Bind="false"
			Condition="Exists('$(OnnxRuntimeRoot)\build\AndroidAAR\onnxruntime-android-1.17.3.aar')"
			Include="$(OnnxRuntimeRoot)\build\AndroidAAR\onnxruntime-android-1.17.3.aar"/>
		<!--
		<AndroidNativeLibrary Condition="Exists('$(OnnxRuntimeRoot)\AndroidAAR\jni\arm64-v8a\libonnxruntime.so')"
								Include="$(OnnxRuntimeRoot)\AndroidAAR\jni\arm64-v8a\libonnxruntime.so">
			<Link>libs\arm64-v8a\libonnxruntime.so</Link>
		</AndroidNativeLibrary>
		<AndroidNativeLibrary Condition="Exists('$(OnnxRuntimeRoot)\AndroidAAR\jni\armeabi-v7a\libonnxruntime.so')"
								Include="$(OnnxRuntimeRoot)\AndroidAAR\jni\armeabi-v7a\libonnxruntime.so">
			<Link>libs\armeabi-v7a\libonnxruntime.so</Link>
		</AndroidNativeLibrary>
		<AndroidNativeLibrary Condition="Exists('$(OnnxRuntimeRoot)\AndroidAAR\jni\x86_64\libonnxruntime.so')"
								Include="$(OnnxRuntimeRoot)\AndroidAAR\jni\x86_64\libonnxruntime.so">
			<Link>libs\x86_64\libonnxruntime.so</Link>
		</AndroidNativeLibrary>
		<AndroidNativeLibrary Condition="Exists('$(OnnxRuntimeRoot)\AndroidAAR\jni\x86\libonnxruntime.so')"
								Include="$(OnnxRuntimeRoot)\AndroidAAR\jni\x86\libonnxruntime.so">
			<Link>libs\x86\libonnxruntime.so</Link>
		</AndroidNativeLibrary>
		-->
	</ItemGroup>

	<ItemGroup Condition="'$(IsWindowsBuild)'=='true'">
		<None Include="$(NativeBuildOutputDir)\onnxruntime.dll;
				$(NativeBuildOutputDir)\onnxruntime.pdb;
				$(NativeBuildOutputDir)\onnxruntime_providers_*.dll;
				$(NativeBuildOutputDir)\onnxruntime_providers_*.pdb;
				$(NativeBuildOutputDir)\custom_op_library*.dll">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>true</Visible>
		</None>

		<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\*">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
			</None>
			<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\overridable_initializer.onnx">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</None>
		<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\capi_symbolic_dims.onnx">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</None>
		<None Include="$(OnnxRuntimeRoot)\onnxruntime\test\testdata\custom_op_library\custom_op_test.onnx">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</None>
	    <!-- <BuildEnvVars Include="OnnxRuntimeBuildDirectory=$(OnnxRuntimeBuildDirectory)" /> -->
	</ItemGroup>

	<!-- Property debug output - makes finding/fixing any issues with the the conditions easy. -->
	<PropertyGroup>
		<HaveOrtDll>false</HaveOrtDll>
		<HaveOrtDll Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.dll')">true</HaveOrtDll>
		<HaveOrtSo>false</HaveOrtSo>
		<HaveOrtSo Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')">true</HaveOrtSo>
		<HaveOrtAAR>false</HaveOrtAAR>
		<HaveOrtAAR Condition="Exists('$(OnnxRuntimeRoot)\build\AndroidAAR\onnxruntime-android-1.17.3.aar')">true</HaveOrtAAR>
	</PropertyGroup>
	<Target Name="DumpValues" BeforeTargets="PreBuildEvent">
		<Message Text="IsWindowsBuild='$(IsWindowsBuild)'" />
		<Message Text="IsAndroidBuild='$(IsAndroidBuild)'" />
		<Message Text="IsIOSBuild='$(IsIOSBuild)'" />
		<Message Text="IsMacCatalystBuild='$(IsMacCatalystBuild)'" />
		<Message Text="OnnxRuntimeRoot=$(OnnxRuntimeRoot)" />
		<Message Text="NativeBuildOutputDir=$(NativeBuildOutputDir)" />
		<Message Text="onnxruntime.dll from local build=$(HaveOrtDll)" />
		<Message Text="onnxruntime.so from local build=$(HaveOrtSo)" />
		<Message Text="AAR from AndroidAAR=$(HaveOrtAAR)"/>
	</Target>

	<ItemGroup>
		<PackageReference Include="DeviceRunners.VisualRunners.Maui" Version="0.1.0-preview.2" />
		<PackageReference Include="DeviceRunners.VisualRunners.Xunit" Version="0.1.0-preview.2" />
		<PackageReference Include="DeviceRunners.XHarness.Maui" Version="0.1.0-preview.2" />
		<PackageReference Include="DeviceRunners.XHarness.Xunit" Version="0.1.0-preview.2" />
		<PackageReference Include="Microsoft.DotNet.XHarness.TestRunners.Xunit" Version="9.0.0-prerelease.24374.1" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="8.0.70" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="8.0.70" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.0" />
		<PackageReference Include="xunit" Version="2.9.0" />
		<PackageReference Include="xunit.runner.utility" Version="2.9.0" />
		<PackageReference Include="xunit.runner.visualstudio" Version="2.8.2">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<Target Name="RemoveVisualStudioTestRunner" BeforeTargets="_ComputeAppxPackagePayload">
		<ItemGroup>
			<_VisualStudioTestRunnerFiles Include="@(PackagingOutputs)" Condition="$([System.String]::Copy('%(PackagingOutputs.FullPath)').Contains('xunit.runner.visualstudio'))" />
			<PackagingOutputs Remove="@(_VisualStudioTestRunnerFiles)" />
		</ItemGroup>
	</Target>
</Project>
